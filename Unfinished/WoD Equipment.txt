WOD EQUIPMENT COMPLETE REWRITE (perhaps)

WISH LIST:
	Merge command names ('+equip' on a player runs '+inv')
	Item Counts
	Link a +note to inventory
	Search by multiple fields

-=-=-=-=-=-==--==


EQUIPMENT:
	Add (w/comments)
	Change
	Census
	Delete

INVENTORY:
	Add (w/comments) or Link Note
	Change (non-note only)
	Delete



-==--=-==--=-==-=-

Equipment Object Format:

equip.<key>.<field>
	<key>: Primary key, 0 - 99999
	<field>: Type|Name|Notes|Book|Availability|Legality

equip.<key>.Type:

Ammunition
Ammunition (Grenade)
Armor and Shields
Cameras
Chemical
Computers
Drugs
Explosives
Explosives (Accessory)
Explosives (Device)
Explosives (Firework)
Explosives (Grenade)
Explosives (Other)
Firearms (Accessory)
Firearms (Assault Rifle)
Firearms (Heavy Pistol)
Firearms (Heavy Revolver)
Firearms (Large SMG)
Firearms (Light Pistol)
Firearms (Light Revolver)
Firearms (Light SMG)
Firearms (Machine Gun)
Firearms (Permit)
Firearms (Rifle)
Firearms (Shotgun)
IDs
Melee (Baton)
Melee (Blunt)
Melee (Brass Knuckles)
Melee (Chain)
Melee (Chainsaw)
Melee (Crowbar)
Melee (Fire Axe)
Melee (Hatchet)
Melee (Knife)
Melee (Machete)
Melee (Rapier)
Melee (Sap)
Melee (Spear)
Melee (Stake)
Melee (Tire Iron)
Other Equipment
Ranged
Surveillance
Survival and First Aid
Tools
Traps
Vehicle
Vehicle (Motor)
Vehicles (Accessory)
Vehicles (Aircraft)
Vehicles (Aquatic)
Vehicles (Boat)
Vehicles (Commercial)
Vehicles (Helicopter)
Vehicles (Motor)
Vehicles (Motorcycle)
Vehicles (Other)
Vehicles (Police)

-=-=-=-=-=-==-

Vehicles

Vehicles/Motor
Vehicles/Motor/Motorcycle
Vehicles/Motor/Tank
Vehicles/Motor/Truck
Vehicles/Motor/Car
Vehicles/Motor/Other
Vehicles/Motor/Accessory

Vehicles/Air
Vehicles/Air/Helicoptor
Vehicles/Air/Aeroplane
Vehicles/Air/Other
Vehicles/Air/Accessory

Vehicles/Water
Vehicles/Water/Boat
Vehicles/Water/Ship
Vehicles/Water/Other
Vehicles/Water/Accessory


Firearms

Firearms/Accessory
Firearms/Machine Gun
Firearms/Shotgun
Firearms/Rifle
Firearms/Assault Rifle

Firearms/Pistol
Firearms/Pistol/Heavy
Firearms/Pistol/Light

Firearms/Revolver
Firearms/Revolver/Heavy
Firearms/Revolver/Light

Firearms/SMG
Firearms/SMG/Large
Firearms/SMG/Small


Melee
Melee/Club
Melee/Knife
Melee/Sword
Melee/Spear







--=-=--=-=-=-=-=

- Item
	Name
	Created
	Modified (?)
	Count
	Size
	Availability
	Notes
	- Weapon/Weapon Mod
		Damage
		Initiative
		Strength
		- Ranged
			Range
			Capacity


&fields.item: name count size availability notes book
&fields.item.weapon: damage initiative strength
&fields.item.weapon.ranged: range capacity




Inventory Templates:
	Light Pistol
		Damage: 1, Initiative: 0, Range: 20/40/80, Capacity: 17+1, Strength: 2, 
		Size: 1, Availability: 3

	Heavy Pistol
		Damage: 2, Initiative: -2, Range: 30/60/120, Capacity: 7+1, Strength: 3, 
		Size: 1, Availability: 3


--==--=-=-=-=-=-=-=-=-=-=

=--==--=-==--=-=-=-==-=-=--=
  
+equip/addcat <category/path>=<description>
	- If buried, top level must exist
	- optional later: if buried, higher level is created (recursive)
+equip/delcat <category/path>
	- If has children, cannot delete
	- If has equipment in category, cannot delete

+equip/set <item>/category=<category/path>
	alias:
		+equip/set <item>/type=<category/path>


+equip/new <item>=<category/path>

-==--=-=-==--=-==--=-=-=-=

Storage Format isn't going to change much from the way it is currently:
	equip.<field>.<primary key>

Putting "primary key" at the end for the purposes of `edit()`: Rhost cannot do multiple edits in a single function, so when we go from `lattr()` -> <primary key>, keeping a single edit will be easier to process.

"equip.name.<primary key>" must exist for the item to be valid.


--------------------------------------------------------------------------------
-- DATA: Setup -----------------------------------------------------------------

&d.db: <equipment database dbref>


--------------------------------------------------------------------------------
-- DATA: Fields ----------------------------------------------------------------

&d.fields: name category count notes book

&field.validation.name: valid( attrname, %0 )
&field.validation.category: <has parent, does not exist, no dot >
&field.validation.count: cor( isint( %0 ), strmatch( %0 , ))
&field.validation.notes: 1
&field.validation.book: 1


--------------------------------------------------------------------------------
-- DATA: Categories ------------------------------------------------------------

&d.categories: <list; please keep sorted: major major.minor major.minor2, etc.>


--------------------------------------------------------------------------------
-- CROSS-PLATFORM FUNCTION: Next-Key -------------------------------------------

Pass a sorted list of integers and determine the first integer not on that list
e.g.
	pass: 1 2 3 5 6 10 100
	returns: 4
	pass: 1 2 3 4 5
	returns: 6

--

&.next-key:
	first( 
		setdiff( 
			lnum( 1, inc( last( %0 ))), 
			%0, , , n 
		)
	)

--------------------------------------------------------------------------------
-- FUNCTIONS: Primary Key ------------------------------------------------------

&f.primary-key.next: 
	u( .next-key, u( f.primary-key.list ))

--

&f.primary-key.list:
	sort( 
		edit( 
			lattr( v( d.db )/equip.name.* ), 
			EQUIP.NAME., 
		), 
		n 
	)


--------------------------------------------------------------------------------
-- FUNCTIONS: Category ---------------------------------------------------------

&f.category.parent (???)
&f.category.child (???)


--------------------------------------------------------------------------------
-- COMMAND: addcat -------------------------------------------------------------

0: category to add

--


